AbstractTypesNotSupported=The name of an abstract type or of an interface cannot be used in the serializer unless the type exposes a type proxy mechanism which references a non-abstract, non-generic, non-array type.
AttributeConversionFailed=The attribute '${attributeName}' was either not present on the node or could not be converted to the required type, '${typeName}'.
CannotBeUnknownValidator=The parameter must reference a KnownValidator value other than KnownValidator.Unknown
CannotCreateKnownValidatorThisWay=A self validator cannot be created in this way.
CannotSelectAttributes=The object does not support attributes.
CannotSetPropertyThroughIndirection=The property `${propertyName}' cannot be set for the component because it is either read-only or the component itself is not castable or adaptable to the required interface facility, `${interfaceName}'.
CannotSetTreeBuilderPropertyNow=The given property, `${propertyName},' cannot be set at this time because there is no tree builder context, because the target component is not located within the hierarchy of instances currently accessible by the tree builder, or because the tree builder context has failed to supply a required service.
CannotUseMissingOrErrorProperties=The property initialization for the validator cannot specify properties that are missing or are marked as obsolete or preliminary with an error status: ${errorProperty}.
DefaultDocumentNamespaceNotValid=The default document namespace is not valid for this argument.
DefaultDocumentQualifiedNameNotValid=The default document qualified name is not valid in this context.
EmptyPropertyNameInCompositeName=The composite property reference '${compositePropertyReference}' contains a property name which is empty.
ExternalSourceMissing=The external source '${source}' (content type: '${contentType}') could not be located or the Web client cannot provide access to this resource.
ExternalSourceNotAllowedHere=The external source '${source}' (content type: '${contentType}') cannot be used here because it is annotated with '${message}'.
FieldValueNotAccessible=The value of the field, '${fieldName}', is not accessible.
GenericCanonicalDocumentExceptionMessage=An error was encountered while processing the data of the canonical document.
InstanceFactoryGenericError=The given combination of return type and/or arguments is not supported by this instance factory.
InvalidDocumentQualifiedName=The text does not represent a valid document qualified name.
ItemRequiredToExistInCollection=The item is required to exist in the collection.
KnownStreamingSourceIntrinsicMissing=The given known streaming source type is not accessible because the application does not reference the dependent assembly, ${name}.
MethodReturnValueNotAccessible=The return value for the method is either not accessible or this method is not eligible for validation: `${methodName}'.
NoConstructor=A constructor with matching arguments could not be found.
NotDictionaryType=The target is not a dictionary type and is not able to be treated like one.
ParseFailureAtProperty=The text for the property '${propertyName}' cannot be parsed into a valid instance of type '${typeName}'.
PropertiesSealedBecauseInUse=The properties of the instance cannot be modified because the object is already in use.
PropertyValueNotAccessible=The value of the property, `${propertyName}', is not accessible.
ReferenceMissing=The reference '${reference}' could not be resolved.
ReferenceNotAllowedHere=The reference '${reference}' cannot be used here because it is annotated with '${usage}'.
RegexValidatorDefaultMessage=The value does not match the required pattern.
RegexValidatorDefaultMessageNegate=The value matches a pattern that is not permitted
SelfValidationFailed=Self-validation of the instance failed.
TypeMissing=The type is missing or could not be loaded automatically: ${typeReferenceOrType}.
ValidationErrorsOccurred=One or more validation errors occurred.
ValidationNotDefined=Validation is not defined for the given type.
ValidationResultsCannotRemove=Items cannot be removed or cleared from the ValidationResults, even using the interface implementation.
ValidatorLengthMessageBetween=The text must be a minimum of ${minCharCount} and a maximum of ${maxCharCount} characters in length.
ValidatorLengthMessageBetweenNegate=The text must have fewer than ${minCharCount} characters or more than ${maxCharCount} characters in length.
ValidatorLengthMessageTooLong=This text may have a maximum ${charCount} characters in length.
ValidatorLengthMessageTooShort=This text may have a minimum ${charCount} characters in length.
ValidatorRequiredMessage=This value is required.
ValidatorSpamGuardMessage=This text was not accepted because it was deemed to be spam.